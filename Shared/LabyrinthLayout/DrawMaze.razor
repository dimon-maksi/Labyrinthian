<div class="m-auto align-items-center" style="max-height: 100%; aspect-ratio: 1 / 1;">
    <style>
        .table-container {
            width: 100%;
            height: 100%;
        }

        .table-container table {
            width: 100%;
            height: 100%;
            table-layout: fixed;
        }

        .table-container td {
            width: calc(100% / @Size);
            height: calc(100% / @Size);
            text-align: center;
            vertical-align: middle;       
            border: calc(200px / @Size / 2) solid black;
        }
        .path{
            width: 50%;
            height: 50%;
            background-color: white;
            position: absolute;
        }
        .top-square {  
            left: 25%;
            top: -25%;
        }
        .right-square {   
            left: 90%;
            top: 25%;
        }
        .bottom-square {  
            left: 25%;
            top: 90%;
        }
        .left-square {    
            left: -25%;
            top: 25%;
        }
    </style>

    <div class="table-container">
        <table>
            @for (int i = 0; i < Size; i++)
            {
                <tr>
                    @for (int j = 0; j < Size; j++)
                    {
                        <td style="position: relative">
                            @if (maze.map[i, j].Top){<div class="path top-square"></div>}
                            @if (maze.map[i, j].Right){<div class="path right-square"></div>}
                            @if (maze.map[i, j].Bottom){<div class="path bottom-square"></div>}
                            @if (maze.map[i, j].Left){<div class="path left-square"></div>}
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

@code {
    [Parameter]
    public int Size { get; set; }

    public Maze maze = new();

    protected override void OnParametersSet()
    {
        maze = new(Size);
        maze.Generate();
    }
}
